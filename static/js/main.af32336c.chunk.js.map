{"version":3,"sources":["Actions/index.js","Reducers/index.js","Components/Listing/Listing.js","Components/List/List.js","Components/Favourites/Favourites.js","Components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["fetchListIfNeeded","dispatch","getState","frappListings","isLoading","type","fetch","proxyUrl","then","response","json","list","receiveList","initialState","favourites","rootReducer","combineReducers","state","arguments","length","undefined","action","findIndex","item","title","listingTitle","Object","objectSpread","concat","toConsumableArray","find","connect","_ref","listing","tab","listingTypeColor","react_default","a","createElement","className","style","backgroundColor","src","imageUrl","alt","desc","num","UNITS","toFixed","shortenNumber","onClick","e","preventDefault","addToFavourites","addListing","List","this","props","Fragment","map","element","index","Components_Listing_Listing","key","Component","Favourites","Header","react_router_dom","to","middleware","thunk","store","createStore","reducer","applyMiddleware","apply","App","es","Components_Header_Header","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af32336c.chunk.js","sourcesContent":["export const ADD_TO_FAVOURITES = \"ADD_TO_FAVOURITES\";\nexport const REQUEST_LIST = 'REQUEST_LIST'\nexport const RECEIVE_LIST = 'RECEIVE_LIST'\n\nexport const addToFavourites = (listingTitle) => ({\n    type: ADD_TO_FAVOURITES,\n    listingTitle\n})\n\nexport const receiveList = (json) => ({\n    type: RECEIVE_LIST,\n    list: json,\n  })\n\nexport const requestList = () => ({\n    type: REQUEST_LIST,\n  })\n\nconst fetchList = () => dispatch => {\n    dispatch(requestList())\n    var proxyUrl = 'https://cors-anywhere.herokuapp.com/'\n    return fetch(proxyUrl + `http://54.169.233.100:8080/favourite.json`)\n      .then(response => response.json())\n      .then(json => dispatch(receiveList(json)))\n  }\n\nexport const fetchListIfNeeded = () => (dispatch, getState) => {\n    if (getState().frappListings.isLoading) {\n      return dispatch(fetchList())\n    }\n  }","import { ADD_TO_FAVOURITES, RECEIVE_LIST, REQUEST_LIST } from '../Actions/index';\nimport { combineReducers } from 'redux'\n\n\nlet initialState = {\n    list: [],\n    favourites: [],\n    isLoading: true\n}\n\nconst frappListings = (state = initialState, action) => {\n    switch(action.type) {\n        case ADD_TO_FAVOURITES:\n            if(state.favourites.findIndex(item => item.title === action.listingTitle) >= 0) {\n                return {\n                    ...state\n                };\n            }\n            return {\n                ...state,\n                favourites: [\n                    ...state.favourites,\n                    state.list.find(item => item.title === action.listingTitle)\n                ],\n            }\n        case REQUEST_LIST:\n            return {\n                ...state,\n                isLoading: true\n            }\n        case RECEIVE_LIST: \n            return {\n                ...state,\n                list: action.list,\n                isLoading: false\n            }\n        default: \n            return state;\n    }\n} \n\nconst rootReducer = combineReducers({\n    frappListings\n})\n\nexport default rootReducer;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addToFavourites } from '../../Actions';\nimport \"./listing.scss\";\n\nconst Listing = ({dispatch, listing, tab}) => {\n    let listingTypeColor = \"\";\n    if(listing.type === 'internship') {\n        listingTypeColor = \"rgba(193, 70, 112, 0.09)\"\n    }else {\n        listingTypeColor = \"#fff\"\n    }\n\n    let addListing = (e, listingTitle) => {\n        e.preventDefault();\n        dispatch(addToFavourites(listingTitle));\n    }\n\n    let shortenNumber = (num) => {\n        let UNITS = {\n            TENLAKHS: 1000000,\n            LAKHS: 100000,\n            THOUSAND: 1000\n        }\n\n        if(num > UNITS.TENLAKHS) {\n            return (num/UNITS.TENLAKHS).toFixed(2) + \"K\";\n        }else if(num > UNITS.LAKHS) {\n            return (num/UNITS.LAKHS).toFixed(2) + \"K\"\n        }else if(num > UNITS.THOUSAND) {\n            return (num/UNITS.THOUSAND).toFixed(2) + \"K\"\n        }\n\n        return num;\n    }\n    return (\n        <div className=\"container listing\" style={{backgroundColor: listingTypeColor}}>\n            <div className=\"listing-title\" >\n                <p>{listing.title}</p>\n            </div>\n            <div className=\"listing-img\">\n                <img src={listing.imageUrl} alt={listing.title}></img>\n            </div>\n            <div className=\"listing-type\">\n                <p>Type: {listing.type}</p>\n            </div>\n            <div className=\"listing-desc\">\n                <p>{listing.desc}</p>\n            </div>\n            <div  className=\"listing-view_count\">\n                <p>{shortenNumber(listing['view-count'])} Views</p>\n            </div>\n            {\n                tab === 'list' && \n                <div className=\"listing-add\">\n                    <button className=\"btn\" onClick={(e) => addListing(e, listing.title)}>Add</button>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default connect()(Listing);\n\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {fetchListIfNeeded } from '../../Actions';\nimport Listing from '../Listing/Listing'\n\nclass List  extends Component {\n\n    componentDidMount() {\n        this.props.dispatch(fetchListIfNeeded());\n    }\n\n    render() {\n        return (\n            <>\n                {\n                    this.props.isLoading &&\n                    <div className=\"loading\">Loading...</div>\n\n                }\n                {\n                    !this.props.isLoading &&\n                    <div className=\"container list-container\">\n                        {\n                            this.props.list.map((element, index) => (\n                                <Listing listing={element} tab=\"list\" key={index}></Listing>\n                            ))\n                        }\n                    </div>\n\n                }\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = state => (\n    {\n        list: state.frappListings.list,\n        isLoading: state.frappListings.isLoading\n    }\n)\n\nexport default connect(mapStateToProps)(List)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Listing from '../Listing/Listing';\nimport './favourites.scss';\n\nclass Favourites extends Component {\n\n    render() {\n        return (\n            <>\n                {\n                    this.props.favourites.length > 0 &&\n                    <div className=\"container list-container\">\n                        {\n                            this.props.favourites.map((element, index) => (\n                                <Listing listing={element} key={index}></Listing>\n                            ))\n                        }\n                    </div>\n\n                }\n                {\n                    this.props.favourites.length === 0 &&\n                    <div className=\"no-favourites\">No Favourites yet.</div>\n                }\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = state => (\n    {\n        favourites: state.frappListings.favourites,\n    }\n)\n\nexport default connect(mapStateToProps)(Favourites)\n","import React from 'react';\nimport {Link} from 'react-router-dom'\nimport './header.scss';\n\nconst Header = () => {\n    return (\n        <div className=\"container header\">\n            <div className=\"logo\">FRAPP APP</div>\n            <div className=\"menu\">\n                <Link to=\"/\">LIST</Link>\n                <Link to=\"/favourites\">FAVOURITES</Link>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport './App.css';\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport reducer from './Reducers'\nimport List from './Components/List/List';\nimport Favourites from './Components/Favourites/Favourites';\nimport Header from './Components/Header/Header';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './styles/common.scss';\n\nconst middleware = [thunk];\nconst store = createStore(\n  reducer,\n  applyMiddleware(...middleware)\n)\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n      <Header></Header>\n      <Route exact path=\"/\" component={List}></Route>\n      <Route exact path=\"/favourites\" component={Favourites}></Route>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}